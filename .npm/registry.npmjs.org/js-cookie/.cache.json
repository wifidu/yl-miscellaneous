{"_id":"js-cookie","_rev":"112-7599d02f49305f565d2e3115ad15727e","name":"js-cookie","description":"A simple, lightweight JavaScript API for handling cookies","dist-tags":{"latest":"2.2.1","beta":"3.0.0-beta.4","rc":"3.0.0-rc.0"},"versions":{"1.5.0":{"name":"js-cookie","version":"1.5.0","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","jquery":"2.1.3","qunitjs":"1.18.0","requirejs":"2.1.17"},"jspm":{"main":"js.cookie","files":["src/js.cookie.js"],"buildConfig":{"uglify":true}},"jam":{"main":"src/js.cookie.js","include":["src/js.cookie.js"]},"gitHead":"087d36ac338b92c001d3b6fb344874cbf37f8298","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@1.5.0","_shasum":"9a3a12418fbd2d5061a6a970771ed3084a6bfe99","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"github@fagnermartins.com"}],"dist":{"shasum":"9a3a12418fbd2d5061a6a970771ed3084a6bfe99","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-1.5.0.tgz"}},"1.5.1":{"name":"js-cookie","version":"1.5.1","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","jquery":"2.1.3","qunitjs":"1.18.0","requirejs":"2.1.17"},"jspm":{"main":"js.cookie","files":["src/js.cookie.js"],"buildConfig":{"uglify":true}},"jam":{"main":"src/js.cookie.js","include":["src/js.cookie.js"]},"gitHead":"85a7e2866c864d1c4a361525b5fc6510f7cfe4f0","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@1.5.1","_shasum":"a833826f224a4ecbfb114fabf65317f8fefa967f","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"a833826f224a4ecbfb114fabf65317f8fefa967f","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-1.5.1.tgz"}},"2.0.0-pre":{"name":"js-cookie","version":"2.0.0-pre","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"dbea5c3dd024082ccf5dd6a97e3040cfb4a79608","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.0.0-pre","_shasum":"522c492e89f0c94731478fa685ec5eead23ff079","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"522c492e89f0c94731478fa685ec5eead23ff079","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.0-pre.tgz"}},"2.0.0":{"name":"js-cookie","version":"2.0.0","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"3641d94a853034c6401d64de9fd82736c94afde7","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.0.0","_shasum":"f315a55662452fffc79ef6acd3e64b0baa51207d","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"f315a55662452fffc79ef6acd3e64b0baa51207d","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.0.tgz"}},"2.1.0-pre":{"name":"js-cookie","version":"2.1.0-pre","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"988ada83872a9f8c036ed7c39a32767e7274d5a9","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.1.0-pre","_shasum":"dcd609bc2445137c69833a9e8c928efff0fdbc72","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"dcd609bc2445137c69833a9e8c928efff0fdbc72","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.0-pre.tgz"}},"2.0.1":{"name":"js-cookie","version":"2.0.1","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"380cc86630fe807c89aaa5453e606bf6e00a7509","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.0.1","_shasum":"d1e674d1ed5e0263b3909427a0d66e62bcbf30a4","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"d1e674d1ed5e0263b3909427a0d66e62bcbf30a4","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.1.tgz"}},"2.0.2":{"name":"js-cookie","version":"2.0.2","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"45287a3142ca1d17a096a18df7dbaca66d185d0c","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.0.2","_shasum":"7226b704e04b91441fc22bc5967ae3d80c21fb0a","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"7226b704e04b91441fc22bc5967ae3d80c21fb0a","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.2.tgz"}},"2.0.3":{"name":"js-cookie","version":"2.0.3","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"4a67cb3bda1d7bc344d7339ae4efc38d890eb47c","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.0.3","_shasum":"26c44573200fbf62303467ba1605cb6405513311","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"26c44573200fbf62303467ba1605cb6405513311","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.3.tgz"}},"2.0.4":{"name":"js-cookie","version":"2.0.4","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"ce67410de68dc5831b45dc6630974fa0e0b75cf7","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.0.4","_shasum":"5f43d1872118aaf5e7a16029b70976eb7315c6a5","_from":".","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"5f43d1872118aaf5e7a16029b70976eb7315c6a5","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.0.4.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}]},"2.1.0":{"name":"js-cookie","version":"2.1.0","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"0.4.5","grunt-compare-size":"0.4.0","grunt-contrib-connect":"0.10.1","grunt-contrib-jshint":"0.11.1","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"0.7.0","grunt-contrib-uglify":"0.9.1","grunt-contrib-watch":"0.6.1","grunt-jscs":"1.6.0","grunt-saucelabs":"8.6.0","gzip-js":"0.3.2","qunitjs":"1.18.0","requirejs":"2.1.17"},"gitHead":"3f2b5e6884407c54b391483f39ddcd4c70f9243c","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie","_id":"js-cookie@2.1.0","_shasum":"479c20d0a0bb6cab81491f917788cd025d6452f0","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.0","_npmUser":{"name":"fagner","email":"github@fagnermartins.com"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"dist":{"shasum":"479c20d0a0bb6cab81491f917788cd025d6452f0","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.0.tgz"}},"2.1.1":{"name":"js-cookie","version":"2.1.1","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.0","grunt-compare-size":"0.4.0","grunt-contrib-connect":"1.0.0","grunt-contrib-jshint":"1.0.0","grunt-contrib-nodeunit":"0.4.1","grunt-contrib-qunit":"1.1.0","grunt-contrib-uglify":"1.0.1","grunt-contrib-watch":"1.0.0","grunt-jscs":"2.8.0","grunt-saucelabs":"8.6.2","gzip-js":"0.3.2","qunitjs":"1.23.0","requirejs":"2.2.0"},"gitHead":"ea3c0b56fce4a8f806d00463fcd086013f415069","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.1.1","_shasum":"26ada7902e91fe7f8bb01b4831912c724739f381","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.3.1","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"26ada7902e91fe7f8bb01b4831912c724739f381","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.1.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/js-cookie-2.1.1.tgz_1460799100941_0.7264001339208335"}},"2.1.2":{"name":"js-cookie","version":"2.1.2","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.0","grunt-compare-size":"0.4.2","grunt-contrib-connect":"1.0.2","grunt-contrib-jshint":"1.0.0","grunt-contrib-nodeunit":"1.0.0","grunt-contrib-qunit":"1.2.0","grunt-contrib-uglify":"1.0.1","grunt-contrib-watch":"1.0.0","grunt-jscs":"2.8.0","grunt-saucelabs":"8.6.2","gzip-js":"0.3.2","qunitjs":"1.23.1","requirejs":"2.2.0"},"gitHead":"d430a7351127fc3ea0e231103a2badbeedda0e55","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.1.2","_shasum":"88d6d3bc9699a54ac8d0bd7940b0919ac8ab49ac","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.0","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"88d6d3bc9699a54ac8d0bd7940b0919ac8ab49ac","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.2.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/js-cookie-2.1.2.tgz_1464502137085_0.24360701371915638"}},"2.1.3":{"name":"js-cookie","version":"2.1.3","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.0","grunt-compare-size":"0.4.2","grunt-contrib-connect":"1.0.2","grunt-contrib-jshint":"1.0.0","grunt-contrib-nodeunit":"1.0.0","grunt-contrib-qunit":"1.2.0","grunt-contrib-uglify":"2.0.0","grunt-contrib-watch":"1.0.0","grunt-jscs":"3.0.1","grunt-saucelabs":"9.0.0","gzip-js":"0.3.2","qunitjs":"1.23.1","requirejs":"2.2.0"},"gitHead":"68acf18560eb7a5d21db7197ae24d975971d1ae0","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.1.3","_shasum":"48071625217ac9ecfab8c343a13d42ec09ff0526","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.0","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"48071625217ac9ecfab8c343a13d42ec09ff0526","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.3.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/js-cookie-2.1.3.tgz_1472791339652_0.2998941692057997"}},"2.1.4":{"name":"js-cookie","version":"2.1.4","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.0","grunt-compare-size":"0.4.2","grunt-contrib-connect":"1.0.2","grunt-contrib-jshint":"1.1.0","grunt-contrib-nodeunit":"1.0.0","grunt-contrib-qunit":"1.3.0","grunt-contrib-uglify":"2.2.1","grunt-contrib-watch":"1.0.0","grunt-jscs":"3.0.1","grunt-saucelabs":"9.0.0","gzip-js":"0.3.2","qunitjs":"1.23.1","requirejs":"2.3.3"},"gitHead":"8b70250875f7e07445b6a457f9c2474ead4cba44","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.1.4","_shasum":"da4ec503866f149d164cf25f579ef31015025d8d","_from":".","_npmVersion":"3.7.2","_nodeVersion":"4.3.1","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"da4ec503866f149d164cf25f579ef31015025d8d","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.1.4.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/js-cookie-2.1.4.tgz_1491219512452_0.026936121517792344"}},"2.2.0":{"name":"js-cookie","version":"2.2.0","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["jquery-plugin","cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"files":["src/**/*.js","SERVER_SIDE.md","CONTRIBUTING.md"],"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.1","grunt-compare-size":"0.4.2","grunt-contrib-connect":"1.0.2","grunt-contrib-jshint":"1.1.0","grunt-contrib-nodeunit":"1.0.0","grunt-contrib-qunit":"2.0.0","grunt-contrib-uglify":"2.3.0","grunt-contrib-watch":"1.0.0","grunt-jscs":"3.0.1","grunt-saucelabs":"9.0.0","gzip-js":"0.3.2","qunitjs":"1.23.1","requirejs":"2.3.5"},"gitHead":"a0012f21ba0519fa3c7571cc6f16e15902ec051b","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.2.0","_shasum":"1b2c279a6eece380a12168b92485265b35b1effb","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.3","_npmUser":{"name":"fagner","email":"gravatar@fagnermartins.com"},"dist":{"shasum":"1b2c279a6eece380a12168b92485265b35b1effb","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.2.0.tgz"},"maintainers":[{"name":"fagner","email":"gravatar@fagnermartins.com"},{"name":"carhartl","email":"klaus.hartl@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie-2.2.0.tgz_1509170688785_0.4103683396242559"}},"2.2.1":{"name":"js-cookie","version":"2.2.1","description":"A simple, lightweight JavaScript API for handling cookies","main":"src/js.cookie.js","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"grunt":"1.0.3","grunt-compare-size":"0.4.2","grunt-contrib-connect":"2.0.0","grunt-contrib-nodeunit":"2.0.0","grunt-contrib-qunit":"2.0.0","grunt-contrib-uglify":"2.3.0","grunt-contrib-watch":"1.1.0","grunt-eslint":"21.0.0","grunt-saucelabs":"9.0.0","gzip-js":"0.3.2","qunitjs":"1.23.1","requirejs":"2.3.5"},"gitHead":"54962f884e9ae33f93e13ac903ffaf1d5a523598","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@2.2.1","_nodeVersion":"12.7.0","_npmVersion":"6.10.0","dist":{"integrity":"sha512-HvdH2LzI/EAZcUwA8+0nKNtWHqS+ZmijLA30RwZA0bo7ToCckjK5MkGhjED9KoRcXO6BaGI3I9UIzSA1FKFPOQ==","shasum":"69e106dc5d5806894562902aa5baec3744e9b2b8","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-2.2.1.tgz","fileCount":6,"unpackedSize":27614,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdSYVZCRA9TVsSAnZWagAA9ZIP/0m1OCfDz9+PrZURpUnX\nx8bpfdVE83Ihhxx/tkTY2NjVS1F6ytmO4oiruosSKJRvn/6QA5yVjTiXbtNX\nHHnwX77e6miglxHN/NptlxEsRs/mUcvsbN7MRgoK+3aonL+rjMcg3Pklqy9C\nlH3QbkokHiKmxt7aRqoQksGcetOFZJzcv73Nk49NgpD4D3QACH9g3ghhvpc2\nXsnsUHSsbZ5K+pqjKzvTKxHI8vDHZCvU+3i7mW3DgKl46ZxTZOtFPqngfZMI\nDAxWKGacIFkFuJIf9lXNCMKT6PaRGdLB77QiEKLeHT9axdXtgmhSefQ+QcQN\nnuhNp4doLXXvpLhnpR2eXgeA7ZLMA5wiv6HRFfIHaddazgE6WiK7wVA+dJrL\n2pouCVPRZuMC9D2RWdVtC82gnhxapp09//rx4phD8+lJMRNp1XuHArX0KtN/\nQmUZ7Wn+CuTvN3SfAMeloI5OKj50R5JychgfRSlRq58+WalnFweHLO0W/BfW\nSbsLa0ED34mQIQhhNPlGbzDC8F8L1xuQRpxjqhs+hNSDWHR7rL1w3Gm+2qnj\nKwzyzuxHv58x3jJTTAvvL6kNtvrEO0hWwP7tep6KmKf8LFJkmIo/8X3dG9P2\nV2YWT8KuyfqUQyisFjwOjz1iD6H/IsUCqSBAwnQgdU7lLEJyA0zwvqT/cz4Y\n+dxk\r\n=qkjU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_2.2.1_1565099352850_0.2088216105757652"},"_hasShrinkwrap":false},"3.0.0-beta.0":{"name":"js-cookie","version":"3.0.0-beta.0","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"1.0.4","grunt-compare-size":"0.4.2","grunt-contrib-connect":"2.1.0","grunt-contrib-nodeunit":"2.0.0","grunt-contrib-qunit":"3.1.0","grunt-contrib-watch":"1.1.0","grunt-exec":"3.0.0","gzip-js":"0.3.2","prettier":"1.18.2","qunit":"2.9.2","release-it":"^12.3.6","rollup":"^1.20.3","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.12.1","rollup-plugin-terser":"^5.1.1","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/npm/v/js-cookie)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **~900 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm install js-cookie --save\n```\n\nThe npm package has a `module` property that is pointing to an ES module, to provide support for ES module aware bundlers.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js\"></script>\n```\n\n**Never include the source directly from GitHub (http://raw.github.com/...).** The file\nis being served as text/plain and as such may be blocked because of the wrong MIME type.\nBottom line: GitHub is not a CDN.\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie does not raise any exception nor return any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nThis project is [RFC 6265](http://tools.ietf.org/html/rfc6265#section-4.1.1) compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).  \nThe only character in cookie-name or cookie-value that is allowed and still encoded is the percent `%` character, it is escaped in order to interpret percent input as literal.  \nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n_Note: According to [RFC 6265](https://tools.ietf.org/html/rfc6265#section-6.1), your cookies may get deleted if they are too big or there are too many cookies in the same domain, [more details here](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted)._\n\n## Cookie Attributes\n\nCookie attributes defaults can be set globally by setting properties of the `Cookies.defaults` object or individually for each call to `Cookies.set(...)` by passing a plain object in the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value can be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation.  \nAll get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the converter first for each cookie.  \nThe returning String will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter(function (value, name) {\n  if (name === 'escaped') {\n    return unescape(value)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  read: function (value, name) {\n    // Read converter\n  },\n  write: function (value, name) {\n    // Write converter\n  }\n})\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"c85ee95eded7648d4e85d95ec5f1898439fe87b1","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-beta.0","_nodeVersion":"8.16.0","_npmVersion":"6.11.3","dist":{"integrity":"sha512-0pdaQ3fS9kkABzc8RQchzBPR9iMyHZUWekWM+0X25Q79JM1e7WgzWjVzyBWDpTw1fhAwW+vucBKArN7KkrKoCA==","shasum":"e53e88e812833e766c9d91ac0509efcf9ab67558","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-beta.0.tgz","fileCount":7,"unpackedSize":25034,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdmI9pCRA9TVsSAnZWagAAUhMP/AhKYOKP1M5PrvCjNVbY\nmFmfAhj2qZqiflICz+wFPsmBET8PTHU7We1h77zGz8mqPnqe1s0Bj/aL5v4S\nzmGJfBMKlbjNKOe8kLDDmvk1OKwCgiODVk64Jvbgj1y8VPQ2zfJTRQj6PEbT\nOt8uLU/DRixLguvG4My5xDLD9tdT35i1YQbtyXlVIYpJ8WCDJtmMUUMb73YV\n4/ew+OQhC1rpufasnrOPdyGhohAPe6PXTeZxzZK6qDnMLoICXpYHFpU6BLMO\n27mwUaxfOEBo10HsqqVrUOZkNz3HbRU6fMzn+bihFIO6KD2UfOcbpUWJbcUc\nSFs98fAaNWhD6t//VhRULEBm/LOW/6xKPPY2k8IR78dLL/5aPZF/YT74OR6V\ncPHGK41R3bClM16qOrMTtrdl+2uFCeHAONUdyhEBALzKv3pf2JmeMd6F/bWS\nE9O8JYeuSotnHAeZTz7Kjqej8IMUrhlpj2Odo8eo6BLwaFFqEBVLyl+ato2G\n5PmL0raLTm9ma6hh7k6pMBy4qQVV5dj1BztbhZcEa5cI/61zkjROMEZMB+qA\n8RhIWTWfDx+DJPLExcRK+QYC822vGo/HZgeIBM/C/Jnp4mNEAqMBmUVkxyUV\nA0Q6vfekjYyjACAIaIscdkudkM3xMZr8SpFsDGL+P1ob4tUEUHucTgeA5xFB\nbwOF\r\n=c/9X\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-beta.0_1570279272536_0.7486445819775649"},"_hasShrinkwrap":false},"3.0.0-beta.1":{"name":"js-cookie","version":"3.0.0-beta.1","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"^0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"^1.0.4","grunt-compare-size":"^0.4.2","grunt-contrib-connect":"^2.1.0","grunt-contrib-nodeunit":"^2.0.0","grunt-contrib-qunit":"^3.1.0","grunt-contrib-watch":"^1.1.0","grunt-exec":"^3.0.0","gzip-js":"^0.3.2","prettier":"^1.18.2","qunit":"^2.9.3","release-it":"^12.3.6","rollup":"^1.20.3","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.13.0","rollup-plugin-terser":"^5.1.1","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/beta)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 800 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\nUMD:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.js\"></script>\n```\n\nES module:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.mjs\"\n></script>\n```\n\n**Never include the source directly from GitHub (http://raw.github.com/...).** The file\nis being served as text/plain and as such may be blocked because of the wrong MIME type.\nBottom line: GitHub is not a CDN.\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nThis project is [RFC 6265](http://tools.ietf.org/html/rfc6265#section-4.1.1) compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).  \nThe only character in cookie-name or cookie-value that is allowed and still encoded is the percent `%` character, it is escaped in order to interpret percent input as literal.  \nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n_Note: According to [RFC 6265](https://tools.ietf.org/html/rfc6265#section-6.1), your cookies may get deleted if they are too big or there are too many cookies in the same domain, [more details here](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted)._\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value can be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), with possible values `lax` or `strict`, prevents the browser from sending cookie along with cross-site requests.\n\nDefault: not set, i.e. include cookie in any request.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'lax' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```\n$ npm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"f1d58ca9bb6c6321e270740922e8f9b9325d1fb3","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-beta.1","_npmVersion":"6.4.1","_nodeVersion":"8.16.0","_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"dist":{"integrity":"sha512-RU/UtFqmRLVOhE/NyMz8hiRSz97XWqaOqJJ2ag3Qxvs7T47wP0AETJpTaLw9ULhKFcyN1hBssLTv0DgWODzlXg==","shasum":"3642bc0759f8095a2f816f76788dd7440614d16b","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-beta.1.tgz","fileCount":7,"unpackedSize":27130,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8MlgCRA9TVsSAnZWagAAwLwP/i/B32+iD5DqQAi2EgFe\nDQvRQ82VEpixHpkXcOpBujxaLvHm4RKitKRLReET1FzaXiI7f9T+fCmWUUbx\nv9TEnhGZ4S6Am7N9l5Q5JEMlBH7OcSYdewl/0o9fStcZW0a//uPwNxGUxt/B\nLgMvU9gvyCNmEwHkwuBBWHtpOumKJfMe2LsbS3ow+sJsLvH91PvDlpqTZmwl\n1PypZatRNsb7yaym2WE4xRRChDX7m2mXR7jWWeO3jwbR6W5/RLTbIcHJAE/i\nmoZFG1RPgfiYKLhwyexff/Axv620M5BegsVhp/5Dhs//Y++CXBHhq0sJ4O1L\n7KrwIK6Pow5HabwCilCRGeIAP6wPYL/IjaomCsOpVOJTrGSVCOkl31Ntnfr2\nZi559PswUzch+mfhUSIIMQe//J/uaVDHXSHhFuuRZuRbVvj+c4NKvElCRvNM\nsJ8/xLnZ6Z9XraRXZiC43pKzqnnc1bcXrKDrTRKLEIa+fd8Gtj9ewqyJj0ER\nqZB+XtgKByeQUCOLYR3qiC79YoLqNFxuU1WJrq6GskZDzLjM3p4d92jJO+4Z\nYiMdqETU+m2XGRuTOVbhWje7kxKOaN9nytFfUC2UcF4Vc6xXd2NGYCpM/EYf\nNwxIa+Co5Uu28y2gZu3VEzqDHCRjaMz/kWFkQKxNL4dfE28EWGUj0IAbQAZf\nJi8j\r\n=ohpc\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-beta.1_1576061279709_0.6231503977862538"},"_hasShrinkwrap":false},"3.0.0-beta.2":{"name":"js-cookie","version":"3.0.0-beta.2","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"^0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"^1.0.4","grunt-compare-size":"^0.4.2","grunt-contrib-connect":"^2.1.0","grunt-contrib-nodeunit":"^2.0.0","grunt-contrib-qunit":"^3.1.0","grunt-contrib-watch":"^1.1.0","grunt-exec":"^3.0.0","gzip-js":"^0.3.2","prettier":"^1.18.2","qunit":"^2.9.3","release-it":"^12.4.3","rollup":"^1.20.3","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.13.0","rollup-plugin-terser":"^5.1.3","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/beta)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 800 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\nUMD:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.js\"></script>\n```\n\nES module:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.mjs\"\n></script>\n```\n\n**Never include the source directly from GitHub (http://raw.github.com/...).** The file\nis being served as text/plain and as such may be blocked because of the wrong MIME type.\nBottom line: GitHub is not a CDN.\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nThis project is [RFC 6265](http://tools.ietf.org/html/rfc6265#section-4.1.1) compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).  \nThe only character in cookie-name or cookie-value that is allowed and still encoded is the percent `%` character, it is escaped in order to interpret percent input as literal.  \nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n_Note: According to [RFC 6265](https://tools.ietf.org/html/rfc6265#section-6.1), your cookies may get deleted if they are too big or there are too many cookies in the same domain, [more details here](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted)._\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value can be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), with possible values `lax` or `strict`, prevents the browser from sending cookie along with cross-site requests.\n\nDefault: not set, i.e. include cookie in any request.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'lax' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```\n$ npm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"099389f0161e5a8ed74033d432be9e6be9e19e00","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-beta.2","_nodeVersion":"12.10.0","_npmVersion":"6.10.3","dist":{"integrity":"sha512-X0UH6f8LeofSGqB89O8PB/4x9xqadIep2ga+ehId9202Dw6m3LqFOsGdtf1nMaVAXXtteol/ITOyF66p81mt7Q==","shasum":"35fd47ac2e199e18c39b71762c0e584816b44011","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-beta.2.tgz","fileCount":7,"unpackedSize":26858,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8pVbCRA9TVsSAnZWagAAz7gP/0AYlMYWU0RnFJFcMFyF\nkPIliFdBf6u4dWb5DWwy1tii+JblStCUJJ2NcIXgODpMd8zlvreWuxBBG9JV\nv8THpxIQFuLfN8RaXdd2hqRQUvU9y25nQ/cDLrEEvk9BSx9AJrdO+6jq+mp8\nfbm5TgC9SP6ukuw1oxt3//R6q5lBva50HS7lYdrHFX73gWHi55RJKXW/v/tb\nnnmefs7H1Qs9VWTZRJr4SK3MuLFBCBLv7VJYMgFvaEUuIqHcH50XYoOVfkd2\nZbINXO6qlJKV5pq9T7uqwlAsnCCiURK559KtA3gDQ0+mAa16y6Yo38bHTbs3\n7JMncYHmizYkDmT5fKsDr+ZzDefvjVLd2rc7iysTf5HcvWHwItrn7u0Oh0oP\n+QPNHMjjn32Vmo+yXqrk0gc8KviCIJeJxIJQEyHGicychQfmOKXAlUtNxwvj\nepzvBnZ0G4xutl/YRzwpPwvhjZNlTwedh7Vxeu9ImuNBDpH6txr+/CjIPjjT\nB1d5Flv0yt+0xhj0h0Xu0aaqSL6FovcyUmN4kXxNz9ojzvKK/MJtrhIbXgu9\nhJR1B78zAX/VHhjpi169/uV91bfAcgtXlaMRHBhdqaz2lRDfaPJB7biZjhZh\nF07wPBl36DA1qmpR5PYEwXK6N+hkt18ETiaxFuSYIh0OH0JCj9sB13NkswJP\nQEHE\r\n=BymJ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-beta.2_1576179035158_0.7840449683839317"},"_hasShrinkwrap":false},"3.0.0-beta.3":{"name":"js-cookie","version":"3.0.0-beta.3","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"^0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"^1.0.4","grunt-compare-size":"^0.4.2","grunt-contrib-connect":"^2.1.0","grunt-contrib-nodeunit":"^2.0.0","grunt-contrib-qunit":"^3.1.0","grunt-contrib-watch":"^1.1.0","grunt-exec":"^3.0.0","gzip-js":"^0.3.2","prettier":"^1.18.2","qunit":"^2.9.3","release-it":"^12.4.3","rollup":"^1.20.3","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.13.0","rollup-plugin-terser":"^5.1.3","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/beta)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- [RFC 6265](https://tools.ietf.org/html/rfc6265) compliant\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 800 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\nUMD:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.js\"></script>\n```\n\nES module:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.mjs\"\n></script>\n```\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nThis project is [RFC 6265](http://tools.ietf.org/html/rfc6265#section-4.1.1) compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one's UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).  \nThe only character in cookie-name or cookie-value that is allowed and still encoded is the percent `%` character, it is escaped in order to interpret percent input as literal.  \nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n_Note: According to [RFC 6265](https://tools.ietf.org/html/rfc6265#section-6.1), your cookies may get deleted if they are too big or there are too many cookies in the same domain, [more details here](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted)._\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value can be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), with possible values `lax` or `strict`, prevents the browser from sending cookie along with cross-site requests.\n\nDefault: not set, i.e. include cookie in any request.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'lax' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```\n$ npm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"42416e8418d24c96de74e97d36db25acbc1444e7","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-beta.3","_nodeVersion":"13.2.0","_npmVersion":"6.13.1","dist":{"integrity":"sha512-BPSYe7ctWpojg0AZzGuR19RrIO8lVQWJ/+Qv0UBVzZmuB/Na1BOLkaZNittRcHfw5BOorM974EilDuNqmfL2UA==","shasum":"35a9827de63ee0600b761499e39f635a7ef40410","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-beta.3.tgz","fileCount":8,"unpackedSize":26977,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd/MGWCRA9TVsSAnZWagAAWMEQAIk8NIjhLOAxOK0gBGv7\nl6uebSf7RAo8HgT2nNWeCKtGkh3WjdY5VBSjrNl8eqUNeCIk4M9E9qoBeJH5\nhpU/EL9aZuc84P4HsPU/APAh4lKeGXY8CXqA436U2gvNIfOGZy8G9Jf68rYR\nRiM6bTsgQnFAJAm/PmW+jQpwtyU4HrA9AiYHRs5ZIwbHRDrhCgzBGiv7/a/p\nT1qoPx/6eFRtapXIqTKVpgCkOkbBzO1DRDjmrYl7zcvWPn1cFbaYYINZDwg+\nWT3PXVPWSdGeeadytUkaNHZIhUm1za0zrpDVHUZc067cr4Qg+GacHOursStc\ncUaMtyLUi/qf49MqLw9iFZgnzoe/YwHUoMoGgVe9g7gzd/p8UOpQMpPAxJCX\nd4NVuTaMrVtiO3ldkuKTRce0SEkALdUCpbKqpRzRxEHAHOFIcFanr1Dp/eKU\nnKdPx4jQR36abXKjgUCwx7X0hhHNs9JnGQbHoxYIA+3krRGtTzYCPP8GqXsb\ncrBepeVNECFA2rcywb0e04GDAk8AdptJLPWrFvqwvZC2cXUwtNta6viz9emS\n4cZMmDMm1NyUgc5fr4J+vWnUKMcWz3bsMlyUMn61P53PO7yZ8sDK0J7n0vDw\nBoOh+RbxKz4rTlFJw15gqw6QWAB4xZoThCc850Ww5VjQ+VSzfn05naxD2vFL\nrA+K\r\n=d3Gw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-beta.3_1576845717882_0.7000177195722459"},"_hasShrinkwrap":false},"3.0.0-beta.4":{"name":"js-cookie","version":"3.0.0-beta.4","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"^0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"^1.0.4","grunt-compare-size":"^0.4.2","grunt-contrib-connect":"^2.1.0","grunt-contrib-nodeunit":"^2.0.0","grunt-contrib-qunit":"^3.1.0","grunt-contrib-watch":"^1.1.0","grunt-exec":"^3.0.0","gzip-js":"^0.3.2","prettier":"^1.18.2","qunit":"^2.9.3","release-it":"^12.4.3","rollup":"^1.20.3","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.13.0","rollup-plugin-terser":"^5.1.3","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/beta)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 700 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\nUMD:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.js\"></script>\n```\n\nES module:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.mjs\"\n></script>\n```\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nSpecial characters that are not permitted in the cookie name (\";\" and \"=\") or cookie value (\";\") are encoded with their UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).\nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value must be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), with possible values `lax` or `strict`, prevents the browser from sending cookie along with cross-site requests.\n\nDefault: not set, i.e. include cookie in any request.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'lax' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```\n$ npm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"40c95a94cb99d3afb65ca4ad60d46108732172a7","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-beta.4","_nodeVersion":"12.14.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-uY/f97HDcNnF+EkZLELNWHQ12cy75IdAJ4gWSwQzsommhP+qusPM5VCd8kj6kA5eKAkEKGLUM63mSeAFuEXrpg==","shasum":"1f2f0e4be06b9d789c3a9e06136c4b4380aa65a7","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-beta.4.tgz","fileCount":8,"unpackedSize":24831,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeYOB5CRA9TVsSAnZWagAAZrgP/isyci5BsxZ6PGN2QfVR\ngNVPy191qtnEn+GVo32EwUYF+tcDjjtq3w0k/Lop05Th+W462c4JDVN/obm2\ni/j1ptYF6f7PNPFTZBCG9XX4UPbTs9gHYNpM5ukDRGPdrzvRt1oGewrcnqt5\nvwHC/zNjgoHrEhVzQtwPVpxy1tj8SBsVp57KQf7ncct3antDk6LCDQuk+/kh\n9b8/XJUk1Ew9Q/7KvQCJvf0oZG+I0vRQdxNWGSF7gQDspt7AZEWcVUJL7Tfl\nZgeyTT4dZZzx9uIEDeYcKWHAomALDNFwwVtIW2E/uWs3g9VeQM763rGdK/zu\njKjUyjICD0ypKlwqxTvWBcGdQnWtvJDloo0NEC3lxMIpj+377B7JFP7ORPen\n6ElHf2ZIv44NBxgLCJjkzuT3kVevyJvTFnDvChQCqAAiKHZ5Ug0xd3oMKlBh\nLb0wZJlrOR5U/Lk3OcL1YKhmd8morcWWvxA+fkxZp7qRP15F5RC85/UJt9NU\nmM3VunVXpmv47Qhx3HrCW6xwYBUssjWbYzXemcdv52o6AelMboGgKmhaWJNG\nVZ7D/68GLe1KOok4CDo17iy5jFAHFGKN8psPFtqKl1ZsLj8XxloQ1lhlAaht\nZNR13L/eV0V2x2/hDtTXTrSVVepuYfnMpDCiD8LUXO6lBci91P6QhUy/r2QD\nnrh2\r\n=t4i1\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-beta.4_1583407225501_0.4661385747432707"},"_hasShrinkwrap":false},"3.0.0-rc.0":{"name":"js-cookie","version":"3.0.0-rc.0","description":"A simple, lightweight JavaScript API for handling cookies","browser":"dist/js.cookie.js","module":"dist/js.cookie.mjs","directories":{"test":"test"},"keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"scripts":{"test":"grunt test","format":"grunt exec:format","dist":"rm -rf dist/* && rollup -c","release":"release-it"},"repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"license":"MIT","devDependencies":{"browserstack-runner":"^0.9.0","eslint":"^6.5.1","eslint-config-standard":"^14.1.0","eslint-plugin-html":"^6.0.0","eslint-plugin-markdown":"^1.0.0","grunt":"^1.0.4","grunt-compare-size":"^0.4.2","grunt-contrib-connect":"^2.1.0","grunt-contrib-nodeunit":"^2.0.0","grunt-contrib-qunit":"^3.1.0","grunt-contrib-watch":"^1.1.0","grunt-exec":"^3.0.0","gzip-js":"^0.3.2","prettier":"^1.18.2","qunit":"^2.9.3","release-it":"^12.4.3","rollup":"^2.0.0","rollup-plugin-filesize":"^6.2.0","rollup-plugin-license":"^0.13.0","rollup-plugin-terser":"^5.1.3","standard":"^14.1.0"},"readme":"<p align=\"center\">\n  <img src=\"https://cloud.githubusercontent.com/assets/835857/14581711/ba623018-0436-11e6-8fce-d2ccd4d379c9.gif\">\n</p>\n\n# JavaScript Cookie [![Build Status](https://travis-ci.org/js-cookie/js-cookie.svg?branch=master)](https://travis-ci.org/js-cookie/js-cookie) [![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2)](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![Code Climate](https://codeclimate.com/github/js-cookie/js-cookie.svg)](https://codeclimate.com/github/js-cookie/js-cookie) [![npm](https://img.shields.io/github/package-json/v/js-cookie/js-cookie)](https://www.npmjs.com/package/js-cookie) [![size](https://img.shields.io/bundlephobia/minzip/js-cookie/beta)](https://www.npmjs.com/package/js-cookie) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/js-cookie/badge?style=rounded)](https://www.jsdelivr.com/package/npm/js-cookie)\n\nA simple, lightweight JavaScript API for handling cookies\n\n- Works in [all](https://www.browserstack.com/automate/public-build/b3VDaHAxVDg0NDdCRmtUOWg0SlQzK2NsRVhWTjlDQS9qdGJoak1GMzJiVT0tLVhwZHNvdGRoY284YVRrRnI3eU1JTnc9PQ==--5e88ffb3ca116001d7ef2cfb97a4128ac31174c2) browsers\n- Accepts [any](#encoding) character\n- [Heavily](test) tested\n- No dependency\n- Supports ES modules\n- Supports AMD/CommonJS\n- Useful [Wiki](https://github.com/js-cookie/js-cookie/wiki)\n- Enable [custom encoding/decoding](#converters)\n- **< 700 bytes** gzipped!\n\n**If you're viewing this at https://github.com/js-cookie/js-cookie, you're reading the documentation for the master branch.\n[View documentation for the latest release.](https://github.com/js-cookie/js-cookie/tree/latest#readme)**\n\n## Installation\n\n### NPM\n\nJavaScript Cookie supports [npm](https://www.npmjs.com/package/js-cookie) under the name `js-cookie`.\n\n```\n$ npm i js-cookie\n```\n\nThe npm package has a `module` field pointing to an ES module variant of the library, mainly to provide support for ES module aware bundlers, whereas its `browser` field points to an UMD module for full backward compatibility.\n\n### Direct download\n\nStarting with version 3 [releases](https://github.com/js-cookie/js-cookie/releases) are distributed with two variants of this library, an ES module as well as an UMD module.\n\nNote the different extensions: `.mjs` denotes the ES module, whereas `.js` is the UMD one.\n\nExample for how to load the ES module in a browser:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script type=\"module\">\n  import Cookies from '/path/to/js.cookie.mjs'\n\n  Cookies.set('foo', 'bar')\n</script>\n```\n\n_Not all browsers support ES modules natively yet_. For this reason the npm package/release provides both the ES and UMD module variant and you may want to include the ES module along with the UMD fallback to account for this:\n\n```html\n<script type=\"module\" src=\"/path/to/js.cookie.mjs\"></script>\n<script nomodule defer src=\"/path/to/js.cookie.js\"></script>\n```\n\nHere we're loading the nomodule script in a deferred fashion, because ES modules are deferred by default. This may not be strictly necessary depending on how you're using the library.\n\n### CDN\n\nAlternatively, include it via [jsDelivr CDN](https://www.jsdelivr.com/package/npm/js-cookie):\n\nUMD:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.js\"></script>\n```\n\nES module:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://cdn.jsdelivr.net/npm/js-cookie@beta/dist/js.cookie.min.mjs\"\n></script>\n```\n\n## ES Module\n\nExample for how to import the ES module from another module:\n\n```javascript\nimport Cookies from 'js-cookie'\n\nCookies.set('foo', 'bar')\n```\n\n## Basic Usage\n\nCreate a cookie, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value')\n```\n\nCreate a cookie that expires 7 days from now, valid across the entire site:\n\n```javascript\nCookies.set('name', 'value', { expires: 7 })\n```\n\nCreate an expiring cookie, valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { expires: 7, path: '' })\n```\n\nRead cookie:\n\n```javascript\nCookies.get('name') // => 'value'\nCookies.get('nothing') // => undefined\n```\n\nRead all visible cookies:\n\n```javascript\nCookies.get() // => { name: 'value' }\n```\n\n_Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not\nhave been used when writing the cookie in question):_\n\n```javascript\nCookies.get('foo', { domain: 'sub.example.com' }) // `domain` won't have any effect...!\n```\n\nThe cookie with the name `foo` will only be available on `.get()` if it's visible from where the\ncode is called; the domain and/or path attribute will not have an effect when reading.\n\nDelete cookie:\n\n```javascript\nCookies.remove('name')\n```\n\nDelete a cookie valid to the path of the current page:\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.remove('name') // fail!\nCookies.remove('name', { path: '' }) // removed!\n```\n\n_IMPORTANT! When deleting a cookie and you're not relying on the [default attributes](#cookie-attributes), you must pass the exact same path and domain attributes that were used to set the cookie:_\n\n```javascript\nCookies.remove('name', { path: '', domain: '.yourdomain.com' })\n```\n\n_Note: Removing a nonexistent cookie neither raises any exception nor returns any value._\n\n## Namespace conflicts\n\nIf there is any danger of a conflict with the namespace `Cookies`, the `noConflict` method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.\n\n```javascript\n// Assign the js-cookie api to a different variable and restore the original \"window.Cookies\"\nvar Cookies2 = Cookies.noConflict()\nCookies2.set('name', 'value')\n```\n\n_Note: The `.noConflict` method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments._\n\n## Encoding\n\nSpecial characters that are not permitted in the cookie name (\";\" and \"=\") or cookie value (\";\") are encoded with their UTF-8 Hex equivalent using [percent-encoding](http://en.wikipedia.org/wiki/Percent-encoding).\nPlease note that the default encoding/decoding strategy is meant to be interoperable [only between cookies that are read/written by js-cookie](https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778). To override the default encoding/decoding strategy you need to use a [converter](#converters).\n\n## Cookie Attributes\n\nCookie attribute defaults can be set globally by creating an instance of the api via `withAttributes()`, or individually for each call to `Cookies.set(...)` by passing a plain object as the last argument. Per-call attributes override the default attributes.\n\n### expires\n\nDefine when the cookie will be removed. Value must be a [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) which will be interpreted as days from time of creation or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance. If omitted, the cookie becomes a session cookie.\n\nTo create a cookie that expires in less than a day, you can check the [FAQ on the Wiki](https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day).\n\n**Default:** Cookie is removed when the user closes the browser.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { expires: 365 })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### path\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating the path where the cookie is visible.\n\n**Default:** `/`\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { path: '' })\nCookies.get('name') // => 'value'\nCookies.remove('name', { path: '' })\n```\n\n**Note regarding Internet Explorer:**\n\n> Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means one cannot set a path using `window.location.pathname` in case such pathname contains a filename like so: `/check.html` (or at least, such cookie cannot be read correctly).\n\nIn fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a [XSS attack](https://github.com/js-cookie/js-cookie/issues/396).\n\n### domain\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.\n\n**Default:** Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).\n\n**Examples:**\n\nAssuming a cookie that is being created on `site.com`:\n\n```javascript\nCookies.set('name', 'value', { domain: 'subdomain.site.com' })\nCookies.get('name') // => undefined (need to read at 'subdomain.site.com')\n```\n\n**Note regarding Internet Explorer default behavior:**\n\n> Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway?  \n> A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com.  \n> Internet Explorer differs from other browsers in this regard.\n\n(From [Internet Explorer Cookie Internals (FAQ)](http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx))\n\nThis means that if you omit the `domain` attribute, it will be visible for a subdomain in IE.\n\n### secure\n\nEither `true` or `false`, indicating if the cookie transmission requires a secure protocol (https).\n\n**Default:** No secure protocol requirement.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { secure: true })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### sameSite\n\nA [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), with possible values `lax` or `strict`, prevents the browser from sending cookie along with cross-site requests.\n\nDefault: not set, i.e. include cookie in any request.\n\n**Examples:**\n\n```javascript\nCookies.set('name', 'value', { sameSite: 'lax' })\nCookies.get('name') // => 'value'\nCookies.remove('name')\n```\n\n### Setting up defaults\n\n```javascript\nconst api = Cookies.withAttributes({ path: '/', domain: '.example.com' })\n```\n\n## Converters\n\n### Read\n\nCreate a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as `Cookies.get()` and `Cookies.get('name')`, will run the given converter for each cookie. The returned value will be used as the cookie value.\n\nExample from reading one of the cookies that can only be decoded using the `escape` function:\n\n```javascript\ndocument.cookie = 'escaped=%u5317'\ndocument.cookie = 'default=%E5%8C%97'\nvar cookies = Cookies.withConverter({\n  read: function (value, name) {\n    if (name === 'escaped') {\n      return unescape(value)\n    }\n    // Fall back to default for all other cookies\n    return Cookies.converter.read(value, name)\n  }\n})\ncookies.get('escaped') // 北\ncookies.get('default') // 北\ncookies.get() // { escaped: '北', default: '北' }\n```\n\n### Write\n\nCreate a new instance of the api that overrides the default encoding implementation:\n\n```javascript\nCookies.withConverter({\n  write: function (value, name) {\n    return value.toUpperCase()\n  }\n})\n```\n\n## TypeScript declarations\n\n```\n$ npm i @types/js-cookie\n```\n\n## Server-side integration\n\nCheck out the [Servers Docs](SERVER_SIDE.md)\n\n## Contributing\n\nCheck out the [Contributing Guidelines](CONTRIBUTING.md)\n\n## Security\n\nFor vulnerability reports, send an e-mail to `jscookieproject at gmail dot com`\n\n## Releasing\n\nWe are using [release-it](https://www.npmjs.com/package/release-it) for automated releasing.\n\nStart a dry run to see what would happen:\n\n```\n$ npm run release minor -- --dry-run\n```\n\nDo a real release (publishes both to npm as well as create a new release on GitHub):\n\n```\n$ npm run release minor\n```\n\n_GitHub releases are created as a draft and need to be published manually!\n(This is so we are able to craft suitable release notes before publishing.)_\n\n## Supporters\n\n<p>\n  <a href=\"https://www.browserstack.com/\"><img src=\"https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png\" width=\"150\"></a>\n</p>\n\nMany thanks to [BrowserStack](https://www.browserstack.com/) for providing unlimited browser testing free of cost.\n\n## Authors\n\n- [Klaus Hartl](https://github.com/carhartl)\n- [Fagner Brack](https://github.com/FagnerMartinsBrack)\n- And awesome [contributors](https://github.com/js-cookie/js-cookie/graphs/contributors)\n","readmeFilename":"README.md","gitHead":"5198674f45861adde9c9a2c29d7314ed0b76aece","bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"homepage":"https://github.com/js-cookie/js-cookie#readme","_id":"js-cookie@3.0.0-rc.0","_nodeVersion":"12.14.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-XzqPqXoTxtMfV1eH7IgQC+iz4sj1lgCR4h3XsShI1cTOyL0yvhSU7hOCpzXTybYHP4RR5oGOAWkDZx5czerg/Q==","shasum":"13fb285ff91bc96433b3539751aee1b48465898f","tarball":"https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.0-rc.0.tgz","fileCount":8,"unpackedSize":24850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeaO02CRA9TVsSAnZWagAAt5AQAIG3unn/04WXZyyuOEkw\nRZNGRiUECbaVHthhoMwzRi6tesy+hJ6cxYqu5qOLqn/VmlrZsxr+gvJvuHa+\nb073w0f7aDWLmjcSzrwMoohYmmopDH2TtphUgQ0Xil+K7ODi5Rw9+G/45w8K\no1VpdBjAWlSnPJbU0ho/Kh2Pku5yvA9UxNRAJfyoTLloBQAE4yU7FSOMhmNb\n/vcHf8dd0BSjK5NcYwys93BKvnFiY90xVpNUGsbzXa8Uri0dlVCTjE8JPqfw\ngLtBeW/3w8QWYDb/O3vw0IeguNTS9FlDylDWe70Q+/8M7qoGwyRHHBXVlJlO\n6+BtE4Cc67Q4+Rfr7FKAHbJvdemDDMCoofdJnPumJioQNcupfIbs/di33bcq\nBGmz2GLnwRu/ILIOIsA3cTAmuORuc+gVHo90waqTIX/mE5vaN2FJ0aMKp0nv\nJC6vet2vSlw8Hb6vq18/xX8pVWqkAZ4xsRVlXFrL0nHIjs7+96+mvIhc5eqV\n4rwKZGETWprIliVI/ZhvnQtJDMe7X/R14snyPOTN49N0HI8QhquJZcMUs2OI\nKUfP/c/4IkzWzsfiVWcCY27N6l5qfToYDACY5gZ7dK7wQwR2ps10X4uOGIQV\nloyrdm2Ki6zdvr8st9R24LhZnjXJgB4kGgqiL/UsNjIILkaCBzOUyYGMdUca\nxTBT\r\n=cW9A\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"_npmUser":{"name":"carhartl","email":"klaus.hartl@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/js-cookie_3.0.0-rc.0_1583934773741_0.4172789662646059"},"_hasShrinkwrap":false}},"readme":"","maintainers":[{"name":"carhartl","email":"klaus.hartl@gmail.com"},{"name":"fagner","email":"gravatar@fagnermartins.com"}],"time":{"modified":"2020-03-11T13:52:57.187Z","created":"2015-04-15T16:36:50.430Z","1.5.0":"2015-04-15T16:36:50.430Z","1.5.1":"2015-04-24T02:57:23.683Z","2.0.0-pre":"2015-06-08T02:52:41.366Z","2.0.0":"2015-06-22T00:21:17.396Z","2.1.0-pre":"2015-06-22T01:01:57.888Z","2.0.1":"2015-06-22T15:07:22.819Z","2.0.2":"2015-06-27T16:49:29.584Z","2.0.3":"2015-07-20T01:43:17.221Z","2.0.4":"2015-10-17T18:15:53.860Z","2.1.0":"2015-12-31T11:45:26.186Z","2.1.1":"2016-04-16T09:31:41.343Z","2.1.2":"2016-05-29T06:09:00.614Z","2.1.3":"2016-09-02T04:42:19.886Z","2.1.4":"2017-04-03T11:38:34.442Z","2.2.0":"2017-10-28T06:04:48.846Z","2.2.1":"2019-08-06T13:49:13.120Z","3.0.0-beta.0":"2019-10-05T12:41:12.730Z","3.0.0-beta.1":"2019-12-11T10:47:59.971Z","3.0.0-beta.2":"2019-12-12T19:30:35.290Z","3.0.0-beta.3":"2019-12-20T12:41:57.994Z","3.0.0-beta.4":"2020-03-05T11:20:25.612Z","3.0.0-rc.0":"2020-03-11T13:52:53.944Z"},"homepage":"https://github.com/js-cookie/js-cookie#readme","repository":{"type":"git","url":"git://github.com/js-cookie/js-cookie.git"},"author":{"name":"Klaus Hartl"},"bugs":{"url":"https://github.com/js-cookie/js-cookie/issues"},"license":"MIT","readmeFilename":"","keywords":["cookie","cookies","browser","amd","commonjs","client","js-cookie","browserify"],"users":{"boton":true,"shakakira":true,"viktorivanov":true,"stany":true,"ibarral":true,"fdeneux":true,"tomekf":true,"lavir":true,"santihbc":true,"amirrustam":true,"markthethomas":true,"mygoare":true,"wangnan0610":true,"sszhu":true,"wkaifang":true,"lmartins":true,"cfleschhut":true,"shahyar":true,"asaupup":true,"rexpan":true,"ridermansb":true,"manhhailua":true,"klimnikita":true,"highlanderkev":true,"redstrike":true,"ericfish007":true,"abuelwafa":true,"ungurys":true,"giuseppe.morelli":true,"panlw":true,"ux_web":true,"cami":true,"zhoutk":true,"kankungyip":true,"itonyyo":true,"jakedalus":true,"rshaw":true,"serge-nikitin":true,"leetwelve":true,"staydan":true,"kael":true,"lvwei":true,"rocket0191":true,"herrbischoff":true,"philligan":true,"shriek":true,"ivan.marquez":true,"kssioalmeida":true,"gaikema":true,"axiang":true,"gerst20051":true,"monjer":true,"yama-dev":true,"nuwaio":true,"jian263994241":true,"carlosvillademor":true,"dwqs":true,"shay-altman":true,"sternelee":true,"shuoshubao":true,"codeinpixel":true,"junjiansyu":true,"sarnsdev":true,"rikstam":true,"nicknaso":true,"foooooops":true,"likkli":true,"willwolffmyren":true,"yichan":true,"fredcorn":true,"jrobinsonc":true,"d3ck":true,"yanghcc":true,"mjasso":true,"xiaobing":true,"fmakareev":true,"shangsinian":true,"jolg42":true,"xiechao06":true},"_etag":"W/\"3218df24add8a56e5ce723a469fa40b2\"","_lastModified":"Wed, 11 Mar 2020 13:52:59 GMT"}